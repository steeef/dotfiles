# status bar
set-option -g status-utf8 on

# auto window rename
set-window-option -g automatic-rename

set -g status-interval 1
set -g status-justify left # center align window list
set -g status-left-length 32
set -g status-right-length 150
# default statusbar colors
set -g status-fg yellow
set -g status-bg blue
set -g message-fg yellow
set -g message-bg black
set -g message-attr bold
set -g window-status-activity-attr bold
set -g status-left '#[fg=brightwhite,bg=blue,bold] ❐ #S \
#[fg=blue,bg=brightyellow,nobold]⮀#[fg=black] #(whoami) \
##[fg=yellow,bg=blue,nobold]⮀'
set -g window-status-format "#[fg=brightwhite,bg=blue,bold] #I #W "
set -g window-status-current-format '#[fg=blue,bg=yellow,nobold]⮀\
#[fg=black,bg=yellow,noreverse,nobold] \
##I ⮁ #W #[fg=yellow,bg=blue,nobold]⮀'
set -g status-right '#[fg=blue,bg=yellow]⮀#[fg=black] %a %H:%M:%S \
#[fg=yellow,bg=blue]⮀#[fg=brightwhite,bg=blue,bold]%Y-%m-%d'

# pane colors
set-option -g pane-border-fg '#333333'
set-option -g pane-border-bg '#333333'
set-option -g pane-active-border-fg '#aaaaaa'
set-option -g pane-active-border-bg '#aaaaaa'

# mouse options
set-window-option -g mode-mouse off
#set-option -g mouse-select-pane on
#set-option -g mouse-resize-pane on
#set-option -g mouse-select-window on

# enable copy-paste http://goo.gl/DN82E
# enable RubyMotion http://goo.gl/WDlCy
set -g default-command "reattach-to-user-namespace -l $(basename $SHELL)"

# Rather than constraining window size to the maximum size of any client
# connected to the *session*, constrain window size to the maximum size of any
# client connected to *that window*. Much more reasonable.
setw -g aggressive-resize on

# color
set -g default-terminal "screen-256color"

# faster key repetition
set -s escape-time 0

# Vim uses C-b, so set prefix to C-a
set-option -g prefix C-a
unbind C-b

# quick pane cycling
unbind ^A
bind ^A select-pane -t :.+

# use vi mode
setw -g mode-keys vi
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

# smart pane switching with awareness of vim splits
# https://github.com/christoomey/vim-tmux-navigator
bind -n C-h run "(tmux display-message -p '#{pane_current_command}' | \
                grep -iq 'vim' && tmux send-keys C-h) || tmux select-pane -L"
bind -n C-j run "(tmux display-message -p '#{pane_current_command}' | \
                grep -iq 'vim' && tmux send-keys C-j) || tmux select-pane -D"
bind -n C-k run "(tmux display-message -p '#{pane_current_command}' | \
                grep -iq 'vim' && tmux send-keys C-k) || tmux select-pane -U"
bind -n C-l run "(tmux display-message -p '#{pane_current_command}' | \
                grep -iq 'vim' && tmux send-keys C-l) || tmux select-pane -R"
bind -n C-\ run "(tmux display-message -p '#{pane_current_command}' | \
                grep -iq 'vim' && tmux send-keys 'C-\\') || tmux select-pane -l"

# vim copy/paste
bind-key -t vi-copy 'v' begin-selection
bind-key -t vi-copy 'y' copy-pipe "reattach-to-user-namespace pbcopy"
unbind -t vi-copy Enter
bind-key -t vi-copy Enter copy-pipe "reattach-to-user-namespace pbcopy"

# reload config
bind r source-file ~/.tmux.conf \; display-message "Config reloaded..."

# use w to create panes
bind w split-window -h

# send a command to screen/tmux session running inside tmux (e.g., ssh session)
bind-key a send-prefix
